// implement rule 110
const BOARD_WIDTH 100
const ITERATIONS 49

const INITIAL_CELL 49
const ALIVE 42
const DEAD 32

const NEW_LINE 10

const RULE 30

mem INITIAL_CELL + 1 store8

0 while dup ITERATIONS < do
  // calculate the buffer (characters)
  0 while dup BOARD_WIDTH < do
    dup mem + load8
    if
      dup mem + BOARD_WIDTH + ALIVE store8
    else
      dup mem + BOARD_WIDTH + DEAD store8
    fi
    1 +
  done

  // add `\n` to end of line and print out
  mem + BOARD_WIDTH + NEW_LINE store8
  BOARD_WIDTH 1 + mem BOARD_WIDTH + write

  // pattern reference
  mem 0 + load8 1 shl
  mem 1 + load8
  bor

  // implement rule to generate new pattern
  1 while dup BOARD_WIDTH < do
     swap 1 shl 7 band
     over 1 + mem + load8 bor
     2dup RULE swap shr 1 band
     swap mem + swap store8
     swap

    1 +
  done drop
  drop

  1 +
done
drop
